课程项目：
参考git实现原理，使用Java实现blob、tree、commit核心存储结构
功能：
1.Commit：提交commit，可以使用”git log”查看commit历史
2.回滚 使用”git reset” 回滚到指定分支
3.分支 创建分支、实现分支间切换

第一周任务：
（1）文件的key-value：
实现key-value存储（封装为class）：
Key：文件名
Value：文件中内容（key根据value计算得出）
功能：
1.给定value，向存储中添加对应的key-value
2.给定key，查找得到对应的value
 
（2）文件夹的key-value存储：
  遍历文件夹目录， 如果遇到子文件则转化为blob并保存
                  如果遇到子文件夹则递归调用内部的文件夹或文件，转化为blob与tree
并保存
 
（3）单元测试（unittest）
 通过代码自动化的检测key-value存储实现是否正确，确保大量文件进行存储时的效率与正确率。


存储目标分析：
（1）blob文件的value：文件内容
                Key：value的hash值
（2）tree文件夹的value：内部blob文件的key、每个子文件夹tree的key、子文件以及子
文件夹的名称
                 Key：tree文件夹value的hash值

实现设计：
（1）hash类：计算文件blob、文件夹tree的hash值。
-计算字符串（string型）参数的hash方法
-计算file的hash方法
-返回得到的hash值
（2）<优化后>KeyValueObject: blob、tree的父类，子类blob与tree继承自object类
     计算key值
     创建类型为blob类型的文件
     创建类型为tree类型的文件

（3）blob类：
计算该blob文件的key
创建以key命名的blob文件

（4）tree类：
计算该tree文件的key值
以key命名的tree文件
第二周任务
一、实现commit
设计思路：
A）建立一个commit文件，以key-value存储。文件名为key，文件内容为value
创建一个commit类：
（1）Commit的Value：
项目根目录tree对象的key； 2. 前驱commit对象的key； 3. 代码author； 4. 代码commiter； 5. commit时间戳； 6. commit备注/注释
（2）commit的key：commit的value 的hash值
B）建立一个head指针
文件内存储最新commit的key
C)进行commit
每次生成的commit，将其根目录的tree与已有的最新commit的tree的key进行比较，发现不相同时（即文件发生了变动）添加一个commit对象，更新HEAD文件中存储的内容

二、自动化测试

第三周任务
（1）分支
实现设计：
     分支部分应该保存：
a所有分支信息
b每个分支的最新commit id
c当前处于的分支
实现过程：
创建一个文件夹，文件夹命名为branch，文件夹中的每个文件是各个分支的信息（初始状态下，branch文件夹中有一个名为main的空文件
每新建一个分支，在branch文件夹中增加一个以该分支名命名的文件，每次commit将commit的key写入对应的分支文件中
每次commit将其对应的分支名写入head文件中

（2）回滚

1.从commmit记录中找到回滚目标，即对应的commit key（git log）
2.把commit对应的根目录Tree对象恢复成一个文件夹
（a）根据commit key查询得到commit的value
（b）从commit value中解析得到根目录tree的key
3.恢复(path)：
（a）根据tree的key查询得到value
（b）解析这个tree对象value所代表的文件夹内的子文件与子文件夹名称以及对应的blob/tree key
—对于blob，在path中创建文件，命名为相应的文件名，写入blob的value--—对于tree，在path中创建文件夹，命名为相应的文件夹名，递归调用恢复(path+文件夹名)
（c）更新head指针
（d）将head文件中的commit的key改为回滚到的commit的key


（3）分支切换
1.找到要切换的分支文件，获得该分支最新commit的key
2.把commit对应的根目录tree对象恢复成文件夹（同回滚）
3.更新head指针，将head文件中的分支记录改为切换为的分支


（4）命令行交互
实现想法：
Scanner接收用户指令
通过main函数命令行参数String[] args接收用户指令

实现的命令：

git branch：获得所有的branch，显示每一个branch的key
          实现思路：创建一个文件夹存储每一个分支branch的id，遍历读取文件中所有文件的文件名。
   
   git checkout “branchname” 切换到名为”branchname”分支

Git log: 获得所有的提交记录，显示每一次commit的key 
  实现思路：创建一个文件，每次提交将生成的commit的key写入文件中，执行git log操作，依次读出该文件中记录的commit的key以及找到对应的commit文件读出其value

